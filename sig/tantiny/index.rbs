module Tantiny
  class Index
    DEFAULT_INDEX_SIZE: Integer
    DEFAULT_LIMIT: Integer

    def self.new: (
      String path,
      **untyped options
    ) { (*untyped) -> void } -> Index

    def self.__new: (
      String path,
      Integer index_size,
      Tokenizer default_tokenizer,
      Hash[String, Tokenizer] field_tokenizers,
      Array[String] text_fields,
      Array[String] string_fields,
      Array[String] integer_fields,
      Array[String] double_fields,
      Array[String] date_fields,
      Array[String] facet_fields
    ) -> Index

    attr_reader schema: Schema

    def commit: () -> void
    def reload: () -> void
    def <<: (untyped document) -> void
    def delete: (String id) -> void

    def search: (
      (Query | String) query,
      ?limit: Integer,
      **untyped smart_query_options
    ) -> Array[String]

    def all_query: () -> Query
    def empty_query: () -> Query
    def term_query: (fields fields, String term, **untyped options) -> Query
    def fuzzy_term_query: (fields fields, String term, ?Integer distance, **untyped options) -> Query
    def phrase_query: (fields fields, String phrase, **untyped options) -> Query
    def regex_query: (fields fields, String regex, **untyped options) -> Query
    def prefix_query: (fields fields, String prefix, **untyped options) -> Query
    def facet_query: (Symbol field, String path, **untyped options) -> Query
    def range_query: (fields fields, Range[numeric | date] range, **untyped options) -> Query
    def smart_query: (fields fields, String query_string, **untyped options) -> Query

    def __commit: () -> void
    def __reload: () -> void

    def __add_document: (
      String id,
      Hash[String, String] text_fields,
      Hash[String, String] string_fields,
      Hash[String, Integer] integer_fields,
      Hash[String, Float] double_fields,
      Hash[String, String] date_fields,
      Hash[String, String] facet_fields
    ) -> void

    def __delete_document: (String id) -> void

    def __search: (Query query, Integer limit) -> Array[String]

    private

    attr_writer schema: Schema

    def slice_document: (
      untyped document,
      Array[Symbol] fields
    ) { (untyped v) -> untyped } -> Hash[String, untyped]

    def default_search: (
      String query_string,
      Integer limit,
      ?fuzzy_distance: Integer
    ) -> Array[String]

    def resolve: (untyped document, Symbol field) -> untyped
  end
end