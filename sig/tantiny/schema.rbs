module Tantiny
  class Schema
    attr_reader default_tokenizer: Tokenizer
    attr_reader id_field: Symbol
    attr_reader text_fields: Array[Symbol]
    attr_reader string_fields: Array[Symbol]
    attr_reader integer_fields: Array[Symbol]
    attr_reader double_fields: Array[Symbol]
    attr_reader date_fields: Array[Symbol]
    attr_reader facet_fields: Array[Symbol]
    attr_reader field_tokenizers: Hash[Symbol, Tokenizer]

    def initialize: (Tokenizer tokenizer) { (*untyped) -> void } -> void
    def tokenizer_for: (Symbol field) -> Tokenizer

    private

    def id: (Symbol key) -> void
    def text: (Symbol key, ?tokenizer: Tokenizer) -> void
    def string: (Symbol key) -> void
    def integer: (Symbol key) -> void
    def double: (Symbol key) -> void
    def date: (Symbol key) -> void
    def facet: (Symbol key) -> void
  end
end
